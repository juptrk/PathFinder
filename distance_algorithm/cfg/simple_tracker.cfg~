#!/usr/bin/env python
PACKAGE = "pcl_demo"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

ransac = gen.enum([ gen.const("SAC_RANSAC",   int_t, 0, ""),
                    gen.const("SAC_LMEDS",    int_t, 1, ""),
                    gen.const("SAC_MSAC",     int_t, 2, ""),
                    gen.const("SAC_RRANSAC",  int_t, 3, ""),
                    gen.const("SAC_RMSAC",    int_t, 4, ""),
                    gen.const("SAC_MLESAC",   int_t, 5, ""),
                    gen.const("SAC_PROSAC",   int_t, 6, "")],
                    "ransac_method")

gen.add("ransac_plane", int_t, 0, "RANSAC method (plane)", 0, edit_method=ransac)
gen.add("ransac_sphere", int_t, 0, "RANSAC method (sphere)", 0, edit_method=ransac)

gen.add("iterations_plane", int_t, 0, "RANSAC iterations (plane)", 50, 1, 20000)
gen.add("iterations_sphere", int_t, 0, "RANSAC iterations (sphere)", 7000, 1, 20000)

gen.add("planes", int_t, 0, "no of planes", 1, 0, 10)
gen.add("spheres", int_t, 0, "no of spheres", 10, 0, 10)

gen.add("sphere_min_points", int_t, 0, "min no of point per sphere", 50, 4, 100)
gen.add("sphere_normal_distance_weight", double_t, 0, "NormalDistanceWeight", 0.1, 0.001, 0.5)
gen.add("sphere_distance_threshold", double_t, 0, "DistanceThreshold", 0.06, 0.001, 0.5)

gen.add("sphere_radius_min", double_t, 0, "sphere radius (min)", 0.06, 0.04, 0.4)
gen.add("sphere_radius_max", double_t, 0, "sphere radius (max)", 0.13, 0.04, 0.4)

exit(gen.generate(PACKAGE, "pcl_demo", "pcl_demo"))
